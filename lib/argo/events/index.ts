// *** WARNING: this file was generated by the apigen generation tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import { core, meta } from '@jkcfg/kubernetes/api';
import { KubernetesObject } from '@dpu/jkcfg-k8s';

export namespace argoproj {
  export namespace common {
    /**
     * AMQPEventData represents the event data generated by AMQP gateway.
     */
    export class AMQPEventData {
      /**
       * AppId refers to the application id
       */
      public appId: string;

      /**
       * Body represents the messsage body
       */
      public body: string;

      /**
       * ContentEncoding is the MIME content encoding
       */
      public contentEncoding: string;

      /**
       * ContentType is the MIME content type
       */
      public contentType: string;

      /**
       * CorrelationId is the correlation identifier
       */
      public correlationId: string;

      /**
       * Delivery mode can be either - non-persistent (1) or persistent (2)
       */
      public deliveryMode: number;

      /**
       * Exchange is basic.publish exchange
       */
      public exchange: string;

      /**
       * Expiration refers to message expiration spec
       */
      public expiration: string;

      /**
       * MessageId is message identifier
       */
      public messageId: string;

      /**
       * Priority refers to the use - 0 to 9
       */
      public priority: number;

      /**
       * ReplyTo is the address to reply to (ex: RPC)
       */
      public replyTo: string;

      /**
       * RoutingKey is basic.publish routing key
       */
      public routingKey: string;

      /**
       * Timestamp refers to the message timestamp
       */
      public timestamp: string;

      /**
       * Type refers to the message type name
       */
      public type: string;



    }

    /**
     * AzureEventsHubEventData represents to the event data generated by Azure Events Hub gateway.
     */
    export class AzureEventsHubEventData {
      /**
       * Message body
       */
      public body: string;

      /**
       * Id of the message
       */
      public id: string;

      /**
       * PartitionKey
       */
      public partitionKey: string;



    }

    /**
     * CalendarEventData represents the event data generated by the Calendar gateway.
     */
    export class CalendarEventData {
      /**
       * EventTime is time at which event occurred
       */
      public eventTime: string;


      /**
       * UserPayload if any
       */
      public userPayload?: string;


    }

    /**
     * EmitterEventData represents the event data generated by the Emitter gateway.
     */
    export class EmitterEventData {
      /**
       * Body represents the message body
       */
      public body: string;

      /**
       * Topic name
       */
      public topic: string;



    }

    /**
     * Event is a data and its context. Adheres to the CloudEvents v0.3 specification
     */
    export class Event {

      public context: argoproj.common.EventContext;


      public data: string;



    }

    /**
     * EventContext contains metadata that provides circumstantial information about the occurrence.
     */
    export class EventContext {
      /**
       * Content type of the data attribute value. Enables the data attribute to carry any type of
       * content, whereby format and encoding might differ from that of the chosen event format. For
       * example, the data attribute may carry an XML or JSON payload and the consumer is informed
       * by this attribute being set to "application/xml" or "application/json" respectively.
       */
      public dataContentType: string;

      /**
       * ID of the event. The semantics are explicitly undefined to ease the implementation of
       * producers.
       */
      public id: string;

      /**
       * This describes the event producer.
       */
      public source: string;

      /**
       * The version of the CloudEvents specification which the event uses. Enables the
       * interpretation of the context.
       */
      public specVersion: string;

      /**
       * Subject of the event
       */
      public subject: string;

      /**
       * Time when the event happened. Must adhere to format specified in RFC 3339.
       */
      public time: string;

      /**
       * The type of occurrence which has happened. Often this attribute is used for routing,
       * observability, policy enforcement, etc. should be prefixed with a reverse-DNS name. The
       * prefixed domain dictates the organization which defines the semantics of this event type.
       * ex: com.github.pull.create
       */
      public type: string;



    }

    /**
     * Dispatch protocol contains configuration necessary to dispatch an event to sensor over
     * different communication protocols
     */
    export class EventProtocol {

      public http: argoproj.common.Http;


      public nats: argoproj.common.Nats;


      public type: string;



    }

    /**
     * GitLabEventData represents the event data generated by the GitLab gateway.
     */
    export class GitLabEventData {
      /**
       * Body represents the message body
       */
      public body: string;



    }

    /**
     * GithubEventData represents the event data generated by the GitHub gateway.
     */
    export class GithubEventData {
      /**
       * Body represents the message body
       */
      public body: string;



    }

    /**
     * Http contains the information required to setup a http server and listen to incoming events
     */
    export class Http {
      /**
       * Port on which server will run
       */
      public port: string;


      /**
       * Annotations to be set for the service generated
       */
      public annotations?: {[key: string]: string};

      /**
       * Labels to be set for the service generated
       */
      public labels?: {[key: string]: string};


    }

    /**
     * KafkaEventData represents the event data generated by the Kafka gateway.
     */
    export class KafkaEventData {
      /**
       * Partition refers to the Kafka partition
       */
      public partition: number;

      /**
       * Timestamp of the message
       */
      public timestamp: string;

      /**
       * Topic refers to the Kafka topic
       */
      public topic: string;

      /**
       * Body refers to the message value
       */
      public value: string;



    }

    /**
     * MQTTEventData represents the event data generated by the MQTT gateway.
     */
    export class MQTTEventData {
      /**
       * MessageId is the unique ID for the message
       */
      public messageId: number;

      /**
       * Payload is the message payload.
       */
      public payload: string;

      /**
       * Topic refers to the MQTT topic name.
       */
      public topic: string;



    }

    /**
     * MinioEventData represents the event data generated by the Minio gateway.
     */
    export class MinioEventData {
      // TODO: resolve the actual reference here
      public notification: any[];



    }

    /**
     * NATSEventData represents the event data generated by the NATS gateway.
     */
    export class NATSEventData {
      /**
       * Message data.
       */
      public data: string;

      /**
       * Name of the subject.
       */
      public subject: string;



    }

    /**
     * NSQEventData represents the event data generated by the NSQ gateway.
     */
    export class NSQEventData {
      /**
       * Body is the message data.
       */
      public Body: string;

      /**
       * NSQDAddress is the address of the nsq host.
       */
      public NSQDAddress: string;

      /**
       * Timestamp of the message.
       */
      public Timestamp: string;



    }

    /**
     * Nats contains the information required to connect to nats server and get subscriptions
     */
    export class Nats {
      /**
       * Type of the connection. either standard or streaming
       */
      public type: string;

      /**
       * URL is nats server/service URL
       */
      public url: string;


      /**
       * The NATS Streaming cluster ID
       */
      public clientId?: string;

      /**
       * The NATS Streaming cluster ID
       */
      public clusterId?: string;

      /**
       * Receive all stored values in order.
       */
      public deliverAllAvailable?: boolean;

      /**
       * Durable subscriptions allow clients to assign a durable name to a subscription when it is
       * created
       */
      public durable?: boolean;

      /**
       * Receive messages starting at a specific sequence number
       */
      public startAtSequence?: string;

      /**
       * Subscribe starting at a specific time
       */
      public startAtTime?: string;

      /**
       * Subscribe starting a specific amount of time in the past (e.g. 30 seconds ago)
       */
      public startAtTimeDelta?: string;

      /**
       * Subscribe starting with most recently published value. Refer
       * https://github.com/nats-io/go-nats-streaming
       */
      public startWithLastReceived?: boolean;


    }

    /**
     * PubSubEventData represents the event data generated by the GCP PubSub gateway.
     */
    export class PubSubEventData {
      /**
       * Attributes represents the key-value pairs the current message is labelled with.
       */
      public attributes: {[key: string]: string};

      /**
       * Body is the actual data in the message.
       */
      public body: string;

      /**
       * ID of the message
       */
      public id: string;

      /**
       * The time at which the message was published.
       */
      public publishTime: string;



    }

    /**
     * RedisEventData represents the event data generated by the Redis gateway.
     */
    export class RedisEventData {
      /**
       * Subscription channel.
       */
      public channel: string;

      /**
       * Message pattern
       */
      public pattern: string;

      /**
       * Message body
       */
      public payload: string;



    }

    /**
     * ResourceEventData represents the event data generated by the Resource gateway.
     */
    export class ResourceEventData {
      /**
       * Resource body.
       */
      public body: string;

      /**
       * Resource group name.
       */
      public group: string;

      /**
       * Resource name.
       */
      public resource: string;

      /**
       * EventType of the type of the event.
       */
      public type: string;

      /**
       * Resource version.
       */
      public version: string;



    }

    /**
     * S3Artifact contains information about an S3 connection and bucket
     */
    export class S3Artifact {

      public accessKey: core.v1.SecretKeySelector;


      public bucket: argoproj.common.S3Bucket;


      public endpoint: string;


      public secretKey: core.v1.SecretKeySelector;



      public events?: string[];


      public filter?: argoproj.common.S3Filter;


      public insecure?: boolean;


      public region?: string;


    }

    /**
     * S3Bucket contains information to describe an S3 Bucket
     */
    export class S3Bucket {

      public name: string;



      public key?: string;


    }

    /**
     * S3Filter represents filters to apply to bucket nofifications for specifying constraints on
     * objects
     */
    export class S3Filter {

      public prefix: string;


      public suffix: string;



    }

    /**
     * SNSEventData represents the event data generated by SNS gateway.
     */
    export class SNSEventData {
      /**
       * Body represents the SNS message body
       */
      public body: string;



    }

    /**
     * SQSEventData represents the event data generated by SQS gateway.
     */
    export class SQSEventData {
      /**
       * The message's contents (not URL-encoded).
       */
      public body: string;

      /**
       * Each message attribute consists of a Name, Type, and Value. For more information, see
       * Amazon SQS Message Attributes
       * (https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html)
       * in the Amazon Simple Queue Service Developer Guide.
       */
      public messageAttributes: object;

      /**
       * A unique identifier for the message. A MessageId is considered unique across all AWS
       * accounts for an extended period of time.
       */
      public messageId: string;



    }

    /**
     * WebhookEventData represents the event data generated by the Webhook gateway.
     */
    export class WebhookEventData {
      /**
       * Body is http request body
       */
      public body: string;

      /**
       * Header is the http request header
       */
      public header: object;



    }

  }

}

export namespace gateway {
  export namespace v1alpha1 {
    /**
     * EventSourceRef holds information about the EventSourceRef custom resource
     */
    export class EventSourceRef {
      /**
       * Name of the event source
       */
      public name: string;


      /**
       * Namespace of the event source Default value is the namespace where referencing gateway is
       * deployed
       */
      public namespace?: string;


    }

    /**
     * Gateway is the definition of a gateway resource
     */
    export class Gateway {

      public metadata: meta.v1.ObjectMeta;


      public spec: gateway.v1alpha1.GatewaySpec;


      /**
       * APIVersion defines the versioned schema of this representation of an object. Servers should
       * convert recognized schemas to the latest internal value, and may reject unrecognized
       * values. More info:
       * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
       */
      public apiVersion?: string;

      /**
       * Kind is a string value representing the REST resource this object represents. Servers may
       * infer this from the endpoint the client submits requests to. Cannot be updated. In
       * CamelCase. More info:
       * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
       */
      public kind?: string;


      /**
      * Create a gateway.v1alpha1.Gateway object with the given unique name and description.
      *
      * @param name The _unique_ name of the object.
      * @param desc The description to use to populate this object properties.
      */
      constructor(name: string, desc: gateway.v1alpha1.Gateway) {
          this.apiVersion = "argoproj.io/v1alpha1";
          this.kind = "Gateway";
          this.metadata = Object.assign({}, desc && desc.metadata || {}, { name });
          this.spec = desc.spec;
      }
    }

    /**
     * GatewayList is the list of Gateway resources
     */
    export class GatewayList {

      public items: gateway.v1alpha1.Gateway[];


      public metadata: meta.v1.ListMeta;


      /**
       * APIVersion defines the versioned schema of this representation of an object. Servers should
       * convert recognized schemas to the latest internal value, and may reject unrecognized
       * values. More info:
       * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
       */
      public apiVersion?: string;

      /**
       * Kind is a string value representing the REST resource this object represents. Servers may
       * infer this from the endpoint the client submits requests to. Cannot be updated. In
       * CamelCase. More info:
       * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
       */
      public kind?: string;


      /**
      * Create a gateway.v1alpha1.GatewayList object with the given unique name and description.
      *
      * @param name The _unique_ name of the object.
      * @param desc The description to use to populate this object properties.
      */
      constructor(name: string, desc: gateway.v1alpha1.GatewayList) {
          this.apiVersion = "argoproj.io/v1alpha1";
          this.items = desc.items;
          this.kind = "GatewayList";
          this.metadata = Object.assign({}, desc && desc.metadata || {}, { name });
      }
    }

    /**
     * GatewayResource holds the metadata about the gateway resources
     */
    export class GatewayResource {
      /**
       * Metadata of the deployment for the gateway
       */
      public deployment: meta.v1.ObjectMeta;


      /**
       * Metadata of the service for the gateway
       */
      public service?: meta.v1.ObjectMeta;


    }

    /**
     * GatewaySpec represents gateway specifications
     */
    export class GatewaySpec {
      /**
       * Port on which the gateway event source processor is running on.
       */
      public processorPort: string;

      /**
       * Type is the type of gateway. Used as metadata.
       */
      public type: string;


      /**
       * EventSourceRef refers to event-source that stores event source configurations for the
       * gateway
       */
      public eventSourceRef?: gateway.v1alpha1.EventSourceRef;

      /**
       * Replica is the gateway deployment replicas
       */
      public replica?: number;

      /**
       * Service is the specifications of the service to expose the gateway
       */
      public service?: gateway.v1alpha1.Service;

      /**
       * Subscribers holds the contexts of the subscribers/sinks to send events to.
       */
      public subscribers?: gateway.v1alpha1.Subscribers;

      /**
       * Template is the pod specification for the gateway
       */
      public template?: gateway.v1alpha1.Template;


    }

    /**
     * Metadata holds the annotations and labels of a gateway pod
     */
    export class Metadata {


      public annotations?: {[key: string]: string};


      public labels?: {[key: string]: string};


    }

    /**
     * NATSSubscriber holds the context of subscriber over NATS.
     */
    export class NATSSubscriber {
      /**
       * Name of the subscription. Must be unique.
       */
      public name: string;

      /**
       * ServerURL refers to the NATS server URL.
       */
      public serverURL: string;

      /**
       * Subject refers to the NATS subject name.
       */
      public subject: string;



    }

    /**
     * Service holds the service information gateway exposes
     */
    export class Service {

      /**
       * clusterIP is the IP address of the service and is usually assigned randomly by the master.
       * If an address is specified manually and is not in use by others, it will be allocated to
       * the service; otherwise, creation of the service will fail. This field can not be changed
       * through updates. Valid values are "None", empty string (""), or a valid IP address. "None"
       * can be specified for headless services when proxying is not required. More info:
       * https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
       */
      public clusterIP?: string;

      /**
       * The list of ports that are exposed by this ClusterIP service.
       */
      public ports?: core.v1.ServicePort[];

      /**
       * Spec holds the gateway service spec. DEPRECATED: Use Ports to declare the ports to be
       * exposed.
       */
      public spec?: core.v1.ServiceSpec;


    }


    export class Subscribers {

      /**
       * HTTP subscribers are HTTP endpoints to send events to.
       */
      public http?: string[];

      /**
       * NATS refers to the subscribers over NATS protocol.
       */
      public nats?: gateway.v1alpha1.NATSSubscriber[];


    }

    /**
     * Template holds the information of a Gateway deployment template
     */
    export class Template {

      /**
       * If specified, the pod's scheduling constraints
       */
      public affinity?: core.v1.Affinity;

      /**
       * Container is the main container image to run in the gateway pod
       */
      public container?: core.v1.Container;

      /**
       * Metdata sets the pods's metadata, i.e. annotations and labels
       */
      public metadata?: gateway.v1alpha1.Metadata;

      /**
       * SecurityContext holds pod-level security attributes and common container settings.
       * Optional: Defaults to empty.  See type description for default values of each field.
       */
      public securityContext?: core.v1.PodSecurityContext;

      /**
       * ServiceAccountName is the name of the ServiceAccount to use to run gateway pod. More info:
       * https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
       */
      public serviceAccountName?: string;

      /**
       * Spec holds the gateway deployment spec. DEPRECATED: Use Container instead.
       */
      public spec?: core.v1.PodSpec;

      /**
       * If specified, the pod's tolerations.
       */
      public tolerations?: core.v1.Toleration[];

      /**
       * Volumes is a list of volumes that can be mounted by containers in a workflow.
       */
      public volumes?: core.v1.Volume[];


      /**
      * Create a gateway.v1alpha1.Template object with the given unique name and description.
      *
      * @param name The _unique_ name of the object.
      * @param desc The description to use to populate this object properties.
      */
      constructor(name: string, desc: gateway.v1alpha1.Template) {
          this.affinity = desc.affinity;
          this.container = desc.container;
          this.metadata = Object.assign({}, desc && desc.metadata || {}, { name });
          this.securityContext = desc.securityContext;
          this.serviceAccountName = desc.serviceAccountName;
          this.spec = desc.spec;
          this.tolerations = desc.tolerations;
          this.volumes = desc.volumes;
      }
    }

  }

}

export namespace sensor {
  export namespace v1alpha1 {
    /**
     * AWSLambdaTrigger refers to specification of the trigger to invoke an AWS Lambda function
     */
    export class AWSLambdaTrigger {
      /**
       * FunctionName refers to the name of the function to invoke.
       */
      public functionName: string;

      /**
       * Payload is the list of key-value extracted from an event payload to construct the request
       * payload.
       */
      public payload: sensor.v1alpha1.TriggerParameter[];

      /**
       * Region is AWS region
       */
      public region: string;


      /**
       * AccessKey refers K8 secret containing aws access key
       */
      public accessKey?: core.v1.SecretKeySelector;

      /**
       * Namespace refers to Kubernetes namespace to read access related secret from. Defaults to
       * sensor's namespace.
       */
      public namespace?: string;

      /**
       * Parameters is the list of key-value extracted from event's payload that are applied to the
       * trigger resource.
       */
      public parameters?: sensor.v1alpha1.TriggerParameter[];

      /**
       * SecretKey refers K8 secret containing aws secret key
       */
      public secretKey?: core.v1.SecretKeySelector;


    }

    /**
     * ArgoWorkflowTrigger is the trigger for the Argo Workflow
     */
    export class ArgoWorkflowTrigger {
      /**
       * Source of the K8 resource file(s)
       */
      public source: sensor.v1alpha1.ArtifactLocation;


      /**
       * Operation refers to the type of operation performed on the argo workflow resource. Default
       * value is Submit.
       */
      public operation?: string;

      /**
       * Parameters is the list of parameters to pass to resolved Argo Workflow object
       */
      public parameters?: sensor.v1alpha1.TriggerParameter[];


    }

    /**
     * ArtifactLocation describes the source location for an external minio
     */
    export class ArtifactLocation {

      /**
       * Configmap that stores the minio
       */
      public configmap?: sensor.v1alpha1.ConfigmapArtifact;

      /**
       * File minio is minio stored in a file
       */
      public file?: sensor.v1alpha1.FileArtifact;

      /**
       * Git repository hosting the minio
       */
      public git?: sensor.v1alpha1.GitArtifact;

      /**
       * Inline minio is embedded in sensor spec as a string
       */
      public inline?: string;

      /**
       * Resource is generic template for K8s resource
       */
      public resource?: KubernetesObject;

      /**
       * S3 compliant minio
       */
      public s3?: argoproj.common.S3Artifact;

      /**
       * URL to fetch the minio from
       */
      public url?: sensor.v1alpha1.URLArtifact;


    }

    /**
     * Backoff for an operation
     */
    export class Backoff {
      /**
       * Duration is the duration in nanoseconds
       */
      public duration: number;

      /**
       * Duration is multiplied by factor each iteration
       */
      public factor: number;

      /**
       * The amount of jitter applied each iteration
       */
      public jitter: number;

      /**
       * Exit with error after this many steps
       */
      public steps: number;



    }

    /**
     * BasicAuth contains the reference to K8s secrets that holds the username and password
     */
    export class BasicAuth {

      /**
       * Namespace to read the secrets from. Defaults to sensor's namespace.
       */
      public namespace?: string;

      /**
       * Password refers to the Kubernetes secret that holds the password required for basic auth.
       */
      public password?: core.v1.SecretKeySelector;

      /**
       * Username refers to the Kubernetes secret that holds the username required for basic auth.
       */
      public username?: core.v1.SecretKeySelector;


    }

    /**
     * ConfigmapArtifact contains information about minio in k8 configmap
     */
    export class ConfigmapArtifact {
      /**
       * Key within configmap data which contains trigger resource definition
       */
      public key: string;

      /**
       * Name of the configmap
       */
      public name: string;

      /**
       * Namespace where configmap is deployed
       */
      public namespace: string;



    }

    /**
     * CustomTrigger refers to the specification of the custom trigger.
     */
    export class CustomTrigger {
      /**
       * Payload is the list of key-value extracted from an event payload to construct the request
       * payload.
       */
      public payload: sensor.v1alpha1.TriggerParameter[];

      /**
       * Secure refers to type of the connection between sensor to custom trigger gRPC
       */
      public secure: boolean;

      /**
       * ServerURL is the url of the gRPC server that executes custom trigger
       */
      public serverURL: string;

      /**
       * Spec is the custom trigger resource specification that custom trigger gRPC server knows how
       * to interpret.
       */
      public spec: {[key: string]: string};


      /**
       * CertFilePath is path to the cert file within sensor for secure connection between sensor
       * and custom trigger gRPC server.
       */
      public certFilePath?: string;

      /**
       * Parameters is the list of parameters that is applied to resolved custom trigger trigger
       * object.
       */
      public parameters?: sensor.v1alpha1.TriggerParameter[];

      /**
       * ServerNameOverride for the secure connection between sensor and custom trigger gRPC server.
       */
      public serverNameOverride?: string;


    }

    /**
     * DataFilter describes constraints and filters for event data Regular Expressions are
     * purposefully not a feature as they are overkill for our uses here See Rob Pike's Post:
     * https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html
     */
    export class DataFilter {
      /**
       * Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys
       * separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array
       * value use the index as the key. The dot and wildcard characters can be escaped with '\'.
       * See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
       */
      public path: string;

      /**
       * Type contains the JSON type of the data
       */
      public type: string;

      /**
       * Value is the allowed string values for this key Booleans are passed using
       * strconv.ParseBool() Numbers are parsed using as float64 using strconv.ParseFloat() Strings
       * are taken as is Nils this value is ignored
       */
      public value: string[];


      /**
       * Comparator compares the event data with a user given value. Can be ">=", ">", "=", "<", or
       * "<=". Is optional, and if left blank treated as equality "=".
       */
      public comparator?: string;


    }

    /**
     * DependencyGroup is the group of dependencies
     */
    export class DependencyGroup {
      /**
       * Dependencies of events
       */
      public dependencies: string[];

      /**
       * Name of the group
       */
      public name: string;



    }

    /**
     * Event represents the cloudevent received from a gateway.
     */
    export class Event {

      public context: sensor.v1alpha1.EventContext;


      public data: string;



    }

    /**
     * EventContext holds the context of the cloudevent received from a gateway.
     */
    export class EventContext {
      /**
       * DataContentType - A MIME (RFC2046) string describing the media type of `data`.
       */
      public dataContentType: string;

      /**
       * ID of the event; must be non-empty and unique within the scope of the producer.
       */
      public id: string;

      /**
       * Source - A URI describing the event producer.
       */
      public source: string;

      /**
       * SpecVersion - The version of the CloudEvents specification used by the event.
       */
      public specversion: string;

      /**
       * Subject - The subject of the event in the context of the event producer
       */
      public subject: string;

      /**
       * Time - A Timestamp when the event happened.
       */
      public time: string;

      /**
       * Type - The type of the occurrence which has happened.
       */
      public type: string;



    }

    /**
     * EventDependency describes a dependency
     */
    export class EventDependency {
      /**
       * EventName is the name of the event
       */
      public eventName: string;

      /**
       * GatewayName is the name of the gateway from whom the event is received
       */
      public gatewayName: string;

      /**
       * Name is a unique name of this dependency
       */
      public name: string;


      /**
       * Filters and rules governing toleration of success and constraints on the context and data
       * of an event
       */
      public filters?: sensor.v1alpha1.EventDependencyFilter;


    }

    /**
     * EventDependencyFilter defines filters and constraints for a event.
     */
    export class EventDependencyFilter {
      /**
       * Name is the name of event filter
       */
      public name: string;


      /**
       * Context filter constraints
       */
      public context?: sensor.v1alpha1.EventContext;

      /**
       * Data filter constraints with escalation
       */
      public data?: sensor.v1alpha1.DataFilter[];

      /**
       * Time filter on the event with escalation
       */
      public time?: sensor.v1alpha1.TimeFilter;


    }

    /**
     * FileArtifact contains information about an minio in a filesystem
     */
    export class FileArtifact {


      public path?: string;


    }

    /**
     * GitArtifact contains information about an minio stored in git
     */
    export class GitArtifact {
      /**
       * Directory to clone the repository. We clone complete directory because GitArtifact is not
       * limited to any specific Git service providers. Hence we don't use any specific git provider
       * client.
       */
      public cloneDirectory: string;

      /**
       * Path to file that contains trigger resource definition
       */
      public filePath: string;

      /**
       * Git URL
       */
      public url: string;


      /**
       * Branch to use to pull trigger resource
       */
      public branch?: string;

      /**
       * Creds contain reference to git username and password
       */
      public creds?: sensor.v1alpha1.GitCreds;

      /**
       * Namespace where creds are stored.
       */
      public namespace?: string;

      /**
       * Ref to use to pull trigger resource. Will result in a shallow clone and fetch.
       */
      public ref?: string;

      /**
       * Remote to manage set of tracked repositories. Defaults to "origin". Refer
       * https://git-scm.com/docs/git-remote
       */
      public remote?: sensor.v1alpha1.GitRemoteConfig;

      /**
       * SSHKeyPath is path to your ssh key path. Use this if you don't want to provide username and
       * password. ssh key path must be mounted in sensor pod.
       */
      public sshKeyPath?: string;

      /**
       * Tag to use to pull trigger resource
       */
      public tag?: string;


    }

    /**
     * GitCreds contain reference to git username and password
     */
    export class GitCreds {

      public password: core.v1.SecretKeySelector;


      public username: core.v1.SecretKeySelector;



    }

    /**
     * GitRemoteConfig contains the configuration of a Git remote
     */
    export class GitRemoteConfig {
      /**
       * Name of the remote to fetch from.
       */
      public name: string;

      /**
       * URLs the URLs of a remote repository. It must be non-empty. Fetch will always use the first
       * URL, while push will use all of them.
       */
      public urls: string[];



    }

    /**
     * HTTPSubscription holds the context of the HTTP subscription of events for the sensor.
     */
    export class HTTPSubscription {
      /**
       * Port on which sensor server should run.
       */
      public port: number;



    }

    /**
     * HTTPTrigger is the trigger for the HTTP request
     */
    export class HTTPTrigger {
      /**
       * Payload is the list of key-value extracted from an event payload to construct the HTTP
       * request payload.
       */
      public payload: sensor.v1alpha1.TriggerParameter[];

      /**
       * URL refers to the URL to send HTTP request to.
       */
      public url: string;


      /**
       * BasicAuth configuration for the http request.
       */
      public basicAuth?: sensor.v1alpha1.BasicAuth;

      /**
       * Headers for the HTTP request.
       */
      public headers?: object;

      /**
       * Method refers to the type of the HTTP request. Refer
       * https://golang.org/src/net/http/method.go for more info. Default value is POST.
       */
      public method?: string;

      /**
       * Parameters is the list of key-value extracted from event's payload that are applied to the
       * HTTP trigger resource.
       */
      public parameters?: sensor.v1alpha1.TriggerParameter[];

      /**
       * Timeout refers to the HTTP request timeout in seconds. Default value is 60 seconds.
       */
      public timeout?: number;

      /**
       * TLS configuration for the HTTP client.
       */
      public tls?: sensor.v1alpha1.TLSConfig;


    }

    /**
     * K8sResourcePolicy refers to the policy used to check the state of K8s based triggers using
     * using labels
     */
    export class K8sResourcePolicy {
      /**
       * Backoff before checking resource state
       */
      public backoff: string;

      /**
       * ErrorOnBackoffTimeout determines whether sensor should transition to error state if the
       * trigger policy is unable to determine the state of the resource
       */
      public errorOnBackoffTimeout: boolean;

      /**
       * Labels required to identify whether a resource is in success state
       */
      public labels: {[key: string]: string};



    }

    /**
     * KafkaTrigger refers to the specification of the Kafka trigger.
     */
    export class KafkaTrigger {
      /**
       * Partition to write data to.
       */
      public partition: number;

      /**
       * Payload is the list of key-value extracted from an event payload to construct the request
       * payload.
       */
      public payload: sensor.v1alpha1.TriggerParameter[];

      /**
       * Name of the topic. More info at https://kafka.apache.org/documentation/#intro_topics
       */
      public topic: string;

      /**
       * URL of the Kafka broker.
       */
      public url: string;


      /**
       * Compress determines whether to compress message or not. Defaults to false. If set to true,
       * compresses message using snappy compression.
       */
      public compress?: boolean;

      /**
       * FlushFrequency refers to the frequency in milliseconds to flush batches. Defaults to 500
       * milliseconds.
       */
      public flushFrequency?: number;

      /**
       * Parameters is the list of parameters that is applied to resolved Kafka trigger object.
       */
      public parameters?: sensor.v1alpha1.TriggerParameter[];

      /**
       * The partitioning key for the messages put on the Kafka topic. Defaults to broker url.
       */
      public partitioningKey?: string;

      /**
       * RequiredAcks used in producer to tell the broker how many replica acknowledgements Defaults
       * to 1 (Only wait for the leader to ack).
       */
      public requiredAcks?: number;

      /**
       * TLS configuration for the Kafka producer.
       */
      public tls?: sensor.v1alpha1.TLSConfig;


    }

    /**
     * NATSSubscription holds the context of the NATS subscription of events for the sensor
     */
    export class NATSSubscription {
      /**
       * ServerURL refers to NATS server url.
       */
      public serverURL: string;

      /**
       * Subject refers to NATS subject name.
       */
      public subject: string;



    }

    /**
     * NATSTrigger refers to the specification of the NATS trigger.
     */
    export class NATSTrigger {
      /**
       * Payload is the list of key-value extracted from an event payload to construct the request
       * payload.
       */
      public payload: sensor.v1alpha1.TriggerParameter[];

      /**
       * Name of the subject to put message on.
       */
      public subject: string;

      /**
       * URL of the NATS cluster.
       */
      public url: string;


      /**
       * Parameters is the list of parameters that is applied to resolved NATS trigger object.
       */
      public parameters?: sensor.v1alpha1.TriggerParameter[];

      /**
       * TLS configuration for the NATS producer.
       */
      public tls?: sensor.v1alpha1.TLSConfig;


    }

    /**
     * OpenWhiskTrigger refers to the specification of the OpenWhisk trigger.
     */
    export class OpenWhiskTrigger {
      /**
       * Name of the action/function.
       */
      public actionName: string;

      /**
       * Host URL of the OpenWhisk.
       */
      public host: string;

      /**
       * Payload is the list of key-value extracted from an event payload to construct the request
       * payload.
       */
      public payload: sensor.v1alpha1.TriggerParameter[];


      /**
       * AuthToken for authentication.
       */
      public authToken?: core.v1.SecretKeySelector;

      /**
       * Namespace for the action. Defaults to "_".
       */
      public namespace?: string;

      /**
       * Parameters is the list of key-value extracted from event's payload that are applied to the
       * trigger resource.
       */
      public parameters?: sensor.v1alpha1.TriggerParameter[];

      /**
       * Version for the API. Defaults to v1.
       */
      public version?: string;


    }

    /**
     * Sensor is the definition of a sensor resource
     */
    export class Sensor {

      public metadata: meta.v1.ObjectMeta;


      public spec: sensor.v1alpha1.SensorSpec;


      /**
       * APIVersion defines the versioned schema of this representation of an object. Servers should
       * convert recognized schemas to the latest internal value, and may reject unrecognized
       * values. More info:
       * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
       */
      public apiVersion?: string;

      /**
       * Kind is a string value representing the REST resource this object represents. Servers may
       * infer this from the endpoint the client submits requests to. Cannot be updated. In
       * CamelCase. More info:
       * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
       */
      public kind?: string;


      /**
      * Create a sensor.v1alpha1.Sensor object with the given unique name and description.
      *
      * @param name The _unique_ name of the object.
      * @param desc The description to use to populate this object properties.
      */
      constructor(name: string, desc: sensor.v1alpha1.Sensor) {
          this.apiVersion = "argoproj.io/v1alpha1";
          this.kind = "Sensor";
          this.metadata = Object.assign({}, desc && desc.metadata || {}, { name });
          this.spec = desc.spec;
      }
    }

    /**
     * SensorList is the list of Sensor resources
     */
    export class SensorList {

      public items: sensor.v1alpha1.Sensor[];


      public metadata: meta.v1.ListMeta;


      /**
       * APIVersion defines the versioned schema of this representation of an object. Servers should
       * convert recognized schemas to the latest internal value, and may reject unrecognized
       * values. More info:
       * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
       */
      public apiVersion?: string;

      /**
       * Kind is a string value representing the REST resource this object represents. Servers may
       * infer this from the endpoint the client submits requests to. Cannot be updated. In
       * CamelCase. More info:
       * https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
       */
      public kind?: string;


      /**
      * Create a sensor.v1alpha1.SensorList object with the given unique name and description.
      *
      * @param name The _unique_ name of the object.
      * @param desc The description to use to populate this object properties.
      */
      constructor(name: string, desc: sensor.v1alpha1.SensorList) {
          this.apiVersion = "argoproj.io/v1alpha1";
          this.items = desc.items;
          this.kind = "SensorList";
          this.metadata = Object.assign({}, desc && desc.metadata || {}, { name });
      }
    }

    /**
     * SensorResources holds the metadata of the resources created for the sensor
     */
    export class SensorResources {
      /**
       * Deployment holds the metadata of the deployment for the sensor
       */
      public deployment: meta.v1.ObjectMeta;


      /**
       * Service holds the metadata of the service for the sensor
       */
      public service?: meta.v1.ObjectMeta;


    }

    /**
     * SensorSpec represents desired sensor state
     */
    export class SensorSpec {
      /**
       * Dependencies is a list of the events that this sensor is dependent on.
       */
      public dependencies: sensor.v1alpha1.EventDependency[];

      /**
       * Subscription refers to the modes of events subscriptions for the sensor. At least one of
       * the types of subscription must be defined in order for sensor to be meaningful.
       */
      public subscription: sensor.v1alpha1.Subscription;

      /**
       * Triggers is a list of the things that this sensor evokes. These are the outputs from this
       * sensor.
       */
      public triggers: sensor.v1alpha1.Trigger[];


      /**
       * Circuit is a boolean expression of dependency groups
       */
      public circuit?: string;

      /**
       * DependencyGroups is a list of the groups of events.
       */
      public dependencyGroups?: sensor.v1alpha1.DependencyGroup[];

      /**
       * ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger
       * round fails. Once sensor state is set to `error`, no further triggers will be processed.
       */
      public errorOnFailedRound?: boolean;

      /**
       * ServiceAnnotations refers to annotations to be set for the service generated
       */
      public serviceAnnotations?: {[key: string]: string};

      /**
       * ServiceLabels to be set for the service generated
       */
      public serviceLabels?: {[key: string]: string};

      /**
       * Template is the pod specification for the sensor
       */
      public template?: sensor.v1alpha1.Template;


    }

    /**
     * SlackTrigger refers to the specification of the slack notification trigger.
     */
    export class SlackTrigger {
      /**
       * SlackToken refers to the Kubernetes secret that holds the slack token required to send
       * messages.
       */
      public slackToken: core.v1.SecretKeySelector;


      /**
       * Channel refers to which Slack channel to send slack message.
       */
      public channel?: string;

      /**
       * Message refers to the message to send to the Slack channel.
       */
      public message?: string;

      /**
       * Namespace to read the password secret from. This is required if the password secret
       * selector is specified.
       */
      public namespace?: string;

      /**
       * Parameters is the list of key-value extracted from event's payload that are applied to the
       * trigger resource.
       */
      public parameters?: sensor.v1alpha1.TriggerParameter[];


    }

    /**
     * StandardK8sTrigger is the standard Kubernetes resource trigger
     */
    export class StandardK8sTrigger {
      /**
       * Source of the K8 resource file(s)
       */
      public source: sensor.v1alpha1.ArtifactLocation;


      /**
       * LiveObject specifies whether the resource should be directly fetched from K8s instead of
       * being marshaled from the resource artifact. If set to true, the resource artifact must
       * contain the information required to uniquely identify the resource in the cluster, that is,
       * you must specify "apiVersion", "kind" as well as "name" and "namespace" meta data. Only
       * valid for operation type `update`
       */
      public liveObject?: boolean;

      /**
       * Operation refers to the type of operation performed on the k8s resource. Default value is
       * Create.
       */
      public operation?: string;

      /**
       * Parameters is the list of parameters that is applied to resolved K8s trigger object.
       */
      public parameters?: sensor.v1alpha1.TriggerParameter[];

      /**
       * PatchStrategy controls the K8s object patching strategy when the trigger operation is
       * specified as patch. possible values: "application/json-patch+json"
       * "application/merge-patch+json" "application/strategic-merge-patch+json"
       * "application/apply-patch+yaml". Defaults to "application/merge-patch+json"
       */
      public patchStrategy?: string;


    }

    /**
     * Subscription holds different modes of subscription available for sensor to consume events.
     */
    export class Subscription {

      /**
       * HTTP refers to the HTTP subscription of events for the sensor.
       */
      public http?: sensor.v1alpha1.HTTPSubscription;

      /**
       * NATS refers to the NATS subscription of events for the sensor
       */
      public nats?: sensor.v1alpha1.NATSSubscription;


    }

    /**
     * TLSConfig refers to TLS configuration for the HTTP client
     */
    export class TLSConfig {
      /**
       * CACertPath refers the file path that contains the CA cert.
       */
      public caCertPath: string;

      /**
       * ClientCertPath refers the file path that contains client cert.
       */
      public clientCertPath: string;

      /**
       * ClientKeyPath refers the file path that contains client key.
       */
      public clientKeyPath: string;



    }

    /**
     * Template holds the information of a sensor deployment template
     */
    export class Template {

      /**
       * Container is the main container image to run in the gateway pod
       */
      public container?: core.v1.Container;

      /**
       * SecurityContext holds pod-level security attributes and common container settings.
       * Optional: Defaults to empty.  See type description for default values of each field.
       */
      public securityContext?: core.v1.PodSecurityContext;

      /**
       * ServiceAccountName is the name of the ServiceAccount to use to run gateway pod. More info:
       * https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
       */
      public serviceAccountName?: string;

      /**
       * Spec holds the sensor deployment spec. DEPRECATED: Use Container instead.
       */
      public spec?: core.v1.PodSpec;

      /**
       * Volumes is a list of volumes that can be mounted by containers in a workflow.
       */
      public volumes?: core.v1.Volume[];


    }

    /**
     * TimeFilter describes a window in time. DataFilters out event events that occur outside the
     * time limits. In other words, only events that occur after Start and before Stop will pass
     * this filter.
     */
    export class TimeFilter {

      /**
       * Start is the beginning of a time window. Before this time, events for this event are
       * ignored and format is hh:mm:ss
       */
      public start?: string;

      /**
       * StopPattern is the end of a time window. After this time, events for this event are ignored
       * and format is hh:mm:ss
       */
      public stop?: string;


    }

    /**
     * Trigger is an action taken, output produced, an event created, a message sent
     */
    export class Trigger {
      /**
       * Policy to configure backoff and execution criteria for the trigger
       */
      public policy: sensor.v1alpha1.TriggerPolicy;

      /**
       * Template describes the trigger specification.
       */
      public template: sensor.v1alpha1.TriggerTemplate;


      /**
       * Parameters is the list of parameters applied to the trigger template definition
       */
      public parameters?: sensor.v1alpha1.TriggerParameter[];


    }

    /**
     * TriggerParameter indicates a passed parameter to a service template
     */
    export class TriggerParameter {
      /**
       * Dest is the JSONPath of a resource key. A path is a series of keys separated by a dot. The
       * colon character can be escaped with '.' The -1 key can be used to append a value to an
       * existing array. See https://github.com/tidwall/sjson#path-syntax for more information about
       * how this is used.
       */
      public dest: string;

      /**
       * Src contains a source reference to the value of the parameter from a dependency
       */
      public src: sensor.v1alpha1.TriggerParameterSource;


      /**
       * Operation is what to do with the existing value at Dest, whether to 'prepend', 'overwrite',
       * or 'append' it.
       */
      public operation?: string;


    }

    /**
     * TriggerParameterSource defines the source for a parameter from a event event
     */
    export class TriggerParameterSource {
      /**
       * DependencyName refers to the name of the dependency. The event which is stored for this
       * dependency is used as payload for the parameterization. Make sure to refer to one of the
       * dependencies you have defined under Dependencies list.
       */
      public dependencyName: string;


      /**
       * ContextKey is the JSONPath of the event's (JSON decoded) context key ContextKey is a series
       * of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an
       * array value use the index as the key. The dot and wildcard characters can be escaped with
       * '\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use
       * this.
       */
      public contextKey?: string;

      /**
       * ContextTemplate is a go-template for extracting a string from the event's context. If a
       * ContextTemplate is provided with a ContextKey, the template will be evaluated first and
       * fallback to the ContextKey. The templating follows the standard go-template syntax as well
       * as sprig's extra functions. See https://pkg.go.dev/text/template and
       * https://masterminds.github.io/sprig/
       */
      public contextTemplate?: string;

      /**
       * DataKey is the JSONPath of the event's (JSON decoded) data key DataKey is a series of keys
       * separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array
       * value use the index as the key. The dot and wildcard characters can be escaped with '\'.
       * See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
       */
      public dataKey?: string;

      /**
       * DataTemplate is a go-template for extracting a string from the event's data. If a
       * DataTemplate is provided with a DataKey, the template will be evaluated first and fallback
       * to the DataKey. The templating follows the standard go-template syntax as well as sprig's
       * extra functions. See https://pkg.go.dev/text/template and
       * https://masterminds.github.io/sprig/
       */
      public dataTemplate?: string;

      /**
       * Value is the default literal value to use for this parameter source This is only used if
       * the DataKey is invalid. If the DataKey is invalid and this is not defined, this param
       * source will produce an error.
       */
      public value?: string;


    }

    /**
     * TriggerPolicy dictates the policy for the trigger retries
     */
    export class TriggerPolicy {

      /**
       * K8sResourcePolicy refers to the policy used to check the state of K8s based triggers using
       * using labels
       */
      public k8s?: sensor.v1alpha1.K8sResourcePolicy;


    }

    /**
     * TriggerSwitch describes condition which must be satisfied in order to execute a trigger.
     * Depending upon condition type, status of dependency groups is used to evaluate the result.
     */
    export class TriggerSwitch {

      /**
       * All acts as a AND operator between dependencies
       */
      public all?: string[];

      /**
       * Any acts as a OR operator between dependencies
       */
      public any?: string[];


    }

    /**
     * TriggerTemplate is the template that describes trigger specification.
     */
    export class TriggerTemplate {
      /**
       * Name is a unique name of the action to take.
       */
      public name: string;


      /**
       * ArgoWorkflow refers to the trigger that can perform various operations on an Argo workflow.
       */
      public argoWorkflow?: sensor.v1alpha1.ArgoWorkflowTrigger;

      /**
       * AWSLambda refers to the trigger designed to invoke AWS Lambda function with with on-the-fly
       * constructable payload.
       */
      public awsLambda?: sensor.v1alpha1.AWSLambdaTrigger;

      /**
       * CustomTrigger refers to the trigger designed to connect to a gRPC trigger server and
       * execute a custom trigger.
       */
      public custom?: sensor.v1alpha1.CustomTrigger;

      /**
       * HTTP refers to the trigger designed to dispatch a HTTP request with on-the-fly
       * constructable payload.
       */
      public http?: sensor.v1alpha1.HTTPTrigger;

      /**
       * StandardK8sTrigger refers to the trigger designed to create or update a generic Kubernetes
       * resource.
       */
      public k8s?: sensor.v1alpha1.StandardK8sTrigger;

      /**
       * Kafka refers to the trigger designed to place messages on Kafka topic.
       */
      public kafka?: sensor.v1alpha1.KafkaTrigger;

      /**
       * NATS refers to the trigger designed to place message on NATS subject.
       */
      public nats?: sensor.v1alpha1.NATSTrigger;

      /**
       * OpenWhisk refers to the trigger designed to invoke OpenWhisk action.
       */
      public openWhisk?: sensor.v1alpha1.OpenWhiskTrigger;

      /**
       * Slack refers to the trigger designed to send slack notification message.
       */
      public slack?: sensor.v1alpha1.SlackTrigger;

      /**
       * Switch is the condition to execute the trigger.
       */
      public switch?: sensor.v1alpha1.TriggerSwitch;


    }

    /**
     * URLArtifact contains information about an minio at an http endpoint.
     */
    export class URLArtifact {
      /**
       * Path is the complete URL
       */
      public path: string;


      /**
       * VerifyCert decides whether the connection is secure or not
       */
      public verifyCert?: boolean;


    }

  }

}

